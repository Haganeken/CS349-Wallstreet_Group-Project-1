#!/usr/bin/env node

'use strict'
var commander = require('commander');
var common = require('../common');
var cst = require('../constant');
var pkg = require('../package.json'); 

var fs = require('fs');
var path = require('path');
var Socket = require('../socket');

var _ = require('lodash');

commander
  .version(pkg.version)
  .option('-a, --auto', 'deploy config init automatic')
  .option('-f, --file <path>', 'set config path. defaults to ./deploy.json')
  .option('-l, --log', 'print docker log')
  .option('-p, --project <project>', 'choose the project logs')
  .option('-s, --service <service>', 'choose the service logs')
  .option('-t, --type <type>','choose the type of logs')

commander
  .command('start')
  .alias('run')
  .description('start a new docker container with the config file')
  .option("-l, --showlog", "show docker log")
  .option("-f, --file <path>", "Which config file to use")
  .action(function(options){
      //加载配置文件
      var file = options.file || 'deploy.json';
      var config = loadConfigFile(file);

      //校验配置文件
      checkConfigFile(config);

      //
      _.assign(config,{cmd : 'start', showlog : options.showlog});

      //获得DOCKET，发送消息
      var socket = new Socket(config.docker.host);
      //
      socket.getfd().emit('deploy',config);
  });

commander
  .command('init [env]')
  .description('init deploy config file')
  .option("-a, --auto", "Whether automatic")
  .action(function(env,options){
      //自动生成
      // TODO modify
      if(options.options[0].bool){
        try{
          fs.writeFileSync(path.resolve(process.cwd(),'deploy.json'),
            cst.DEFAULT_CONFIG);
        }catch(e){
            common.printError(cst.PREFIX_MSG_ERR + 'fs .writeFile error');
            process.exit(1);
        }
        common.printOut(cst.PREFIX_MSG_SUCCESS + 'deploy config file created');
        return process.exit(0);
      }
      //命令行工具

  }).on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ deploy exec sequential');
    console.log('    $ deploy exec async');
    console.log();
  });

commander
  .command('restart')
  .description('restart the specified docker container')
  .action(function(options){
      //加载配置文件
      var file = options.file || './deploy.json';
      var config = loadConfigFile(file);

      //校验配置文件
      checkConfigFile(config,true);

      //
      _.assign(config,{cmd : 'restart' });

      //获得DOCKET，发送消息
      var socket = new Socket(config.docker.host);
      //
      socket.getfd().emit('deploy',config);
      
  }).on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ deploy exec sequential');
    console.log('    $ deploy exec async');
    console.log();
  });

commander
  .command('logdownload')
  .option("-p, --project <project>", "project name")
  .option("-s, --service <service>", "service name")
  .option("-t, --type <type>", "log type")
  .description('restart the specified docker container')
  .action(function(options){
      //TODO
      
  }).on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ deploy exec sequential');
    console.log('    $ deploy exec async');
    console.log();
  });

commander
  .command('*')
  .action(function(env){
    commander.outputHelp();
    process.exit(0);
  });

commander.parse(process.argv);

if(process.argv.length == 2){
    commander.outputHelp();
    process.exit(0);
}

// 加载配置文件
function loadConfigFile(file){
  //
  var filePath = path.resolve(process.cwd(),file);
  
  var data = null;
  try {
    data = fs.readFileSync(filePath);
  } catch(e) {
    common.printError(cst.PREFIX_MSG_ERR + 'JSON ' + file +' not found');
    return process.exit(1);
  }
  var config = null;
  try {
      config = JSON.parse(data);
  }catch(e){
    console.log(e);//debug
      common.printError(cst.PREFIX_MSG_ERR + 'parse onfig file error');
      return process.exit(1);
  }
  return config;
}

//校验配置文件
function checkConfigFile(config,restart){
  var cfgStatus = true;
  if(config.repository.length == 0){
    cfgStatus = false;
  }else{
      _.each(config.repository,function(value){
          if(!value.origin || 
             !value.branch || 
             !value.services || 
             (value.services && value.services.length == 0)){
              cfgStatus = false;
          }
      });
  }

  var opt;
  opt = restart ? config.docker.container : config.docker.image;

  if(cfgStatus){
      if(!config.docker.host || 
         !config.docker.volume || 
         !opt) 
        cfgStatus = false;
  }
  if(!cfgStatus){
      common.printError(cst.PREFIX_MSG_ERR + 'config file parmas error');
      return process.exit(1);
  }
}
